name: 'MacOS Build and Distribute with Rust and K첫zu'

on:
  push:
    branches:
      - main

jobs:
  create-release:
    permissions:
      contents: write
    runs-on: macos-latest
    outputs:
      release_id: ${{ steps.create-release.outputs.result }}

    steps:
      - uses: actions/checkout@v3
      - name: Get Version
        run: echo "PACKAGE_VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_ENV
      - name: Create Release
        id: create-release
        uses: actions/github-script@v6
        with:
          script: |
            const { data } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: `app-v${process.env.PACKAGE_VERSION}`,
              name: `Desktop App v${process.env.PACKAGE_VERSION}`,
              body: 'Assets to download and install the app.',
              draft: true,
              prerelease: false
            });
            return data.id

  build-tauri:
    needs: create-release
    permissions:
      contents: write
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install Dependencies for Building K첫zu
        run: |
          brew install cmake gcc llvm
          export PATH="/usr/local/opt/llvm/bin:$PATH"

      - name: Set Up Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Navigate to `src-tauri` and Install Rust Dependencies
        working-directory: ./src-tauri
        run: cargo install --path .

      - name: Install K첫zu Rust API
        working-directory: ./src-tauri
        run: cargo add kuzu --features=build

      - name: Build Tauri App with K첫zu Integration
        working-directory: ./src-tauri
        env:
         RUST_BACKTRACE: 1
        run: cargo tauri build

  publish-release:
    permissions:
      contents: write
    runs-on: macos-latest
    needs: [create-release, build-tauri]
    steps:
      - name: Publish Release
        uses: actions/github-script@v6
        env:
          release_id: ${{ needs.create-release.outputs.release_id }}
        with:
          script: |
            github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: process.env.release_id,
              draft: false
            });
