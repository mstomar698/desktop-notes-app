name: 'MacOS Build and Release'

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-release:
    runs-on: macos-latest

    env:
      RUST_BACKTRACE: 1
      NODE_ENV: production
      TAURI_SKIP_DEVSERVER: true

    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'
          cache: 'npm'

      - name: Get Version
        run: echo "PACKAGE_VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_ENV

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Cache Rust Dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            src-tauri/target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Install Tauri CLI and Dependencies
        run: |
          npm install -g @tauri-apps/cli
          npm install -D tailwindcss postcss autoprefixer
          
          npm ci  

      - name: Build Dependencies
        run: |
          cd src-tauri
          cargo update
          cargo build --release
          cd ..

      - name: Build Tauri App
        run: npm run tauri build

      - name: Verify Build
        run: |
          if [ ! -d "src-tauri/target/release/bundle/macos" ]; then
            echo "Build failed, application files not found."
            exit 1
          fi

      - name: Create Release
        id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: app-v${{ env.PACKAGE_VERSION }}
          release_name: Desktop App v${{ env.PACKAGE_VERSION }}
          draft: true
          prerelease: false

      - name: Upload Release Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: src-tauri/target/release/bundle/macos/
          asset_name: MyApp-${{ env.PACKAGE_VERSION }}.dmg
          asset_content_type: application/octet-stream