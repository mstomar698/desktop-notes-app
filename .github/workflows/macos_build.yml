name: 'Macos Build and Distribute'

on:
  push:
    branches:
      - main

jobs:
  create-release:
    permissions:
      contents: write
    runs-on: ubuntu-20.04
    outputs:
      release_id: ${{ steps.create-release.outputs.result }}

    steps:
      - uses: actions/checkout@v3
      - name: setup node
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'
      - name: get version
        run: echo "PACKAGE_VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_ENV
      - name: create release
        id: create-release
        uses: actions/github-script@v6
        with:
          script: |
            const { data } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: `app-v${process.env.PACKAGE_VERSION}`,
              name: `Desktop App v${process.env.PACKAGE_VERSION}`,
              body: 'Take a look at the assets to download and install this app.',
              draft: true,
              prerelease: false
            })
            return data.id

  build-tauri:
    needs: create-release
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        platform: [macos-latest]

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v3
      - name: setup node
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'

      - name: Cache Node.js dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-modules-

      - name: Clean Build Directory and windows files
        if: runner.os == 'macOS'
        run: |
          rm -rf src-tauri/target
          rm -rf src-tauri/Cargo.toml
          rm -rf src-tauri/Cargo.lock
          rm -rf src-tauri/build.rs

      - name: Create new Cargo.toml
        if: runner.os == 'macOS'
        run: |
          cp src-tauri/mac-patch/Cargo.toml src-tauri/Cargo.toml
          cp src-tauri/mac-patch/build.rs src-tauri/build.rs

      - name: Cache Cargo dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo
            ~/.rustup
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.toml') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Set up macOS dependencies for Kuzu
        if: runner.os == 'macOS'
        run: |
          brew install cmake python

      - name: Clone and Build KuzuDB on macOS
        if: runner.os == 'macOS'
        run: |
          git clone https://${{ secrets.GH_TOKEN }}@github.com/kuzudb/kuzu.git
          cd kuzu
          make release NUM_THREADS=$(sysctl -n hw.physicalcpu)
          cp build/release/src/libkuzu.dylib ../
      
          
          - name: Cache Kuzu build artifacts
          uses: actions/cache@v3
          with:
            path: kuzu/build/release
            key: ${{ runner.os }}-kuzu-${{ hashFiles('kuzu/*') }}
            restore-keys: |
            ${{ runner.os }}-kuzu-
              
      - name: Commit built KUZU's dylib
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          cp libkuzu.dylib src-tauri/dependencies/ # Or desired directory in your repo
          git add src-tauri/dependencies/libkuzu.dylib
          git commit -m "Add built libkuzu.dylib for macOS"
          git push
          
      - name: Install Rust and Build Application with Kuzu
        uses: dtolnay/rust-toolchain@stable

      - name: Install frontend dependencies
        run: npm install

      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          CMAKE_BUILD_TYPE: Release
        with:
          releaseId: ${{ needs.create-release.outputs.release_id }}

  publish-release:
    permissions:
      contents: write
    runs-on: ubuntu-20.04
    needs: [create-release, build-tauri]

    steps:
      - name: publish release
        id: publish-release
        uses: actions/github-script@v6
        env:
          release_id: ${{ needs.create-release.outputs.release_id }}
        with:
          script: |
            github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: process.env.release_id,
              draft: false
            })
